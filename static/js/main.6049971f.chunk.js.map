{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","containers/TrackContainer.js","components/TrackList/TrackList.js","components/PlaylistListItem/PlaylistListItem.js","containers/PlaylistListItemContainer.js","components/PlaylistList/PlaylistList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","containers/PlaylistContainer.js","components/AppComp/AppComp.js","util/Spotify.js","containers/App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["SearchBar","props","searchPhrase","handleSearchChange","handleClick","playlists","hasCheckedForPlaylists","searchIcon","icon","faSearch","size","listIcon","faList","className","placeholder","value","onChange","length","onClick","Track","track","isInPlaylist","play","isPlayed","isTrackPlayed","titleLink","artistLink","albumLink","playButton","faPlay","pauseButton","faPause","title","artist","album","loop","id","src","preview","Math","floor","random","doubledInPlaylist","TrackContainer","state","bind","this","removeTrack","addTrack","setState","pauseTrack","playTrack","window","open","url","artistUrl","albumUrl","prevProps","prevState","React","Component","TrackList","tracks","map","PlaylistListItem","playlist","handleRemove","editPlaylist","areYouSure","deleteImminent","linkToPlaylist","isEdited","isCurrentPlaylistOnList","isSavedPlaylistAltered","trashIcon","faTrash","editIcon","faEdit","questionIcon","faQuestion","exclamationIcon","faExclamation","name","images","alt","PlaylistListItemContainer","getPlaylistDetails","t","setTimeout","removePlaylist","viewedInDetail","clearTimeout","PlaylistList","SearchResults","style","display","paddingTop","height","propTypes","PropTypes","object","isRequired","func","bool","Playlist","playlistName","handleListNameChange","savePlaylist","clearPlaylist","handleDelete","saveIcon","faSave","timesIcon","faTimes","PlaylistContainer","AppComp","playlistTracks","searchTracks","search","Spotify","clientId","process","accessToken","tokenExpiry","redirectURI","generateURLState","sessionStorage","urlState","toString","getAccessToken","location","href","match","tokenExpiryDate","Date","now","history","pushState","getUserId","fetch","headers","then","response","ok","json","jsonResponse","getUserPlaylists","playlistId","createPlaylist","userId","jsonBody","JSON","stringify","method","body","addPlaylist","uriArr","uris","spotifyLogin","updatePlaylist","url1","url2","encodeURIComponent","phrase","items","App","handleSearchResponse","getPlaylists","handlePlaylistDetails","target","needsLogging","searchTracksFiltered","artists","URI","uri","preview_url","external_urls","spotify","filter","plTrack","includes","item","trackArr","idArr","forEach","playlistTrack","console","log","index","indexOf","total","editedPlaylistId","parse","playlistToRemove","playlistToDeleteId","playlistToRemoveId","playlistToEdit","playlistsArr","oldEditedPlaylistArr","playlistToEditId","trackToAdd","prev","document","getElementById","pause","trackToRemove","searchArr","updatedPlaylistTracks","counterSlice","createSlice","initialState","reducers","increment","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","hostname","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6049971f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './SearchBar.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { faList } from '@fortawesome/free-solid-svg-icons';\n\nexport default function SearchBar(props) {\n    const { searchPhrase, handleSearchChange, handleClick, playlists, hasCheckedForPlaylists } = props;\n    const searchIcon = <FontAwesomeIcon icon={faSearch} size='2x' />;\n    const listIcon = <FontAwesomeIcon icon={faList} size='2x' />;\n    return (\n        <div className=\"SearchBar\">\n            <input \n                placeholder=\"Enter A Song, Album, or Artist\" \n                value={searchPhrase}\n                onChange={handleSearchChange}\n            />\n            <button \n                className={(searchPhrase || (playlists.length === 0 && !hasCheckedForPlaylists)) ? 'SearchButton' : 'SearchButton-inactive'} \n                onClick={(searchPhrase || (playlists.length === 0 && !hasCheckedForPlaylists)) ? handleClick : null}\n            >\n                {(searchPhrase || playlists.length > 0 || hasCheckedForPlaylists) ? searchIcon : listIcon}\n            </button>\n        </div>\n    );\n};\n\nSearchBar.propTypes = {\n    searchPhrase: PropTypes.string.isRequired,\n    handleSearchChange: PropTypes.func.isRequired,\n    handleClick: PropTypes.func.isRequired,\n    playlists: PropTypes.array.isRequired,\n    hasCheckedForPlaylists: PropTypes.bool.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Track.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay } from '@fortawesome/free-solid-svg-icons';\nimport { faPause } from '@fortawesome/free-solid-svg-icons';\n\nexport default function Track(props) {\n    const { track, isInPlaylist, handleClick, play, isPlayed, isTrackPlayed, titleLink, artistLink, albumLink } = props;\n    const playButton = <FontAwesomeIcon icon={faPlay} size='xs' />;\n    const pauseButton = <FontAwesomeIcon icon={faPause} size='xs' />;\n    return (\n        <div className=\"Track\">\n            <div className=\"Track-information\">\n                <h3 className='Track-link' onClick={titleLink}>{track.title}</h3>\n                <p><span className='Track-link' onClick={artistLink}>{track.artist}</span> | <span className='Track-link' onClick={albumLink}>{track.album}</span></p>\n            </div>\n            <audio \n                loop id={track.id} \n                src={track.preview ? track.preview : `https://bigsoundbank.com/UPLOAD/mp3/0${Math.floor((Math.random() * 900) + 100)}.mp3`}\n            >\n                Your browser does not support the audio element\n            </audio>\n            <button\n                className={(isPlayed || !isTrackPlayed) ? (track.preview ? 'Track-action' : 'Track-action red') : 'Track-action-disabled'}\n                onClick={(isPlayed || !isTrackPlayed) ? play : null}\n            >\n                {isPlayed ? pauseButton : playButton}\n            </button>\n            <button \n                className={(track.doubledInPlaylist && !isInPlaylist) ? 'Track-action-disabled' : 'Track-action'} \n                onClick={handleClick}\n            >\n                {isInPlaylist ? '-' : '+'}\n            </button>\n        </div>\n    );\n};\n\nTrack.propTypes = {\n    track: PropTypes.object.isRequired,\n    isInPlaylist: PropTypes.bool.isRequired,\n    handleClick: PropTypes.func.isRequired,\n    play: PropTypes.func.isRequired,\n    isPlayed: PropTypes.bool.isRequired,\n    isTrackPlayed: PropTypes.bool.isRequired,\n    titleLink: PropTypes.func.isRequired,\n    artistLink: PropTypes.func.isRequired,\n    albumLink: PropTypes.func.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Track from '../components/Track/Track';\n\nexport default class TrackContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isPlayed: false,\n        }\n        this.handleClick = this.handleClick.bind(this);\n        this.play = this.play.bind(this);\n        this.titleLink = this.titleLink.bind(this);\n        this.albumLink = this.albumLink.bind(this);\n        this.artistLink = this.artistLink.bind(this);\n    }\n    handleClick() {\n        if (!this.props.isInPlaylist) {\n            this.props.addTrack(this.props.track);\n        } else {\n            this.props.removeTrack(this.props.track);\n        }\n    }\n    play() {\n        if (!this.state.isPlayed) {            \n            this.setState({\n                isPlayed: true\n            }, () => {\n                this.props.playTrack(this.props.track);\n            });             \n        } else {            \n            this.setState({\n                isPlayed: false\n            }, () => {\n                this.props.pauseTrack(this.props.track);\n            });            \n        };    \n    }\n    titleLink() {\n        window.open(this.props.track.url);\n    }\n    artistLink() {\n        window.open(this.props.track.artistUrl);\n    }\n    albumLink() {\n        window.open(this.props.track.albumUrl);\n    }\n    render() {\n        return (\n            <Track \n                track={this.props.track}\n                isInPlaylist={this.props.isInPlaylist}\n                handleClick={this.handleClick}\n                play={this.play}\n                isPlayed={this.state.isPlayed}\n                isTrackPlayed={this.props.isTrackPlayed}\n                titleLink={this.titleLink}\n                artistLink={this.artistLink}\n                albumLink={this.albumLink}\n            />\n        );\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if ((prevProps.isTrackPlayed !== this.props.isTrackPlayed) && prevState.isPlayed && prevProps.isTrackPlayed) {\n            this.setState({\n                isPlayed: false\n            }, () => {\n                this.props.pauseTrack(this.props.track);\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.props.isInPlaylist && this.state.isPlayed) {\n            this.props.pauseTrack(this.props.track);\n        }\n    }\n};\n\nTrackContainer.propTypes = {\n    addTrack: PropTypes.func,\n    isInPlaylist: PropTypes.bool.isRequired,\n    track: PropTypes.object.isRequired,\n    removeTrack: PropTypes.func,\n    playTrack: PropTypes.func.isRequired,\n    pauseTrack: PropTypes.func.isRequired,\n    isTrackPlayed: PropTypes.bool.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TrackList.css';\nimport TrackContainer from '../../containers/TrackContainer';\n\nexport default function TrackList(props) {\n    const { tracks, isInPlaylist, addTrack, removeTrack, playTrack, pauseTrack, isTrackPlayed } = props;\n    return (\n        <div className=\"TrackList\">\n            {tracks.map(track => {\n                return <TrackContainer\n                    track={track}                    \n                    key={track.id}                    \n                    isInPlaylist={isInPlaylist}\n                    addTrack={addTrack}\n                    removeTrack={removeTrack}\n                    playTrack={playTrack}\n                    pauseTrack={pauseTrack}\n                    isTrackPlayed={isTrackPlayed}\n                />\n            })}\n        </div>\n    );\n};\n\nTrackList.propTypes = {\n    tracks: PropTypes.array,\n    isInPlaylist: PropTypes.bool.isRequired,\n    addTrack: PropTypes.func,\n    removeTrack: PropTypes.func,\n    playTrack: PropTypes.func.isRequired,\n    pauseTrack: PropTypes.func.isRequired,\n    isTrackPlayed: PropTypes.bool.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PlaylistListItem.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faTrash, faQuestion, faExclamation } from '@fortawesome/free-solid-svg-icons';\n\nexport default function PlaylistListItem(props) {\n    const { playlist, handleRemove, editPlaylist, areYouSure, deleteImminent, linkToPlaylist, isEdited, isCurrentPlaylistOnList, isSavedPlaylistAltered } = props;\n    const trashIcon = <FontAwesomeIcon icon={faTrash} size='xs' />;\n    const editIcon = <FontAwesomeIcon icon={faEdit} size='xs' />;\n    const questionIcon = <FontAwesomeIcon icon={faQuestion} size='xs' />;\n    const exclamationIcon = <FontAwesomeIcon icon={faExclamation} size='xs' />;\n    return (        \n        <div className=\"PlaylistListItem\">\n            <div className=\"Playlist-information\">\n                <h3 className='PlaylistListItem-link' onClick={linkToPlaylist}>{playlist.name}</h3>\n                <p>Number of tracks: {playlist.tracks}</p>\n            </div>\n            <div className='img-container'>\n                <img\n                    src={(playlist.images.length > 0) ? playlist.images[0].url : ''}\n                    alt=''\n                    onClick={linkToPlaylist}\n                />\n            </div> \n            <button \n                className={isEdited ? 'Playlist-action-disabled' : 'Playlist-action'}\n                onClick={!isEdited ? handleRemove : null}\n            >\n                {(areYouSure || deleteImminent) ? (deleteImminent ? exclamationIcon : questionIcon) : trashIcon}\n            </button>\n            <button \n                className={(areYouSure || deleteImminent || isEdited || ((isCurrentPlaylistOnList && isSavedPlaylistAltered))) ? 'Playlist-action-disabled' :'Playlist-action'}\n                onClick={(isEdited || ((isCurrentPlaylistOnList && isSavedPlaylistAltered))) ? null : editPlaylist}\n            >\n                {editIcon}\n            </button>\n        </div>        \n    );\n};\n\nPlaylistListItem.propTypes = {\n    playlist: PropTypes.object.isRequired,\n    editPlaylist: PropTypes.func.isRequired,\n    areYouSure: PropTypes.bool.isRequired,\n    deleteImminent: PropTypes.bool.isRequired,\n    handleRemove: PropTypes.func.isRequired,\n    linkToPlaylist: PropTypes.func.isRequired,\n    isEdited: PropTypes.bool.isRequired,\n    isCurrentPlaylistOnList: PropTypes.bool.isRequired,\n    isSavedPlaylistAltered: PropTypes.bool.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PlaylistListItem from '../components/PlaylistListItem/PlaylistListItem';\n\nexport default class PlaylistListItemContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            areYouSure: false,\n            deleteImminent: false,\n        };\n        this.handleRemove = this.handleRemove.bind(this);\n        this.editPlaylist = this.editPlaylist.bind(this);\n        this.linkToPlaylist = this.linkToPlaylist.bind(this);\n    }   \n    linkToPlaylist() {\n        window.open(this.props.playlist.url);\n    }\n    editPlaylist() {\n       this.props.getPlaylistDetails(this.props.playlist);\n    }\n    handleRemove() {\n        if (!this.state.areYouSure && !this.state.deleteImminent) {\n            this.setState({\n                areYouSure: true,\n            }, () => {\n                this.t = setTimeout(() => {\n                    this.setState({\n                        areYouSure: false\n                    })\n                }, 5000);\n            });\n        } else if (this.state.areYouSure && !this.state.deleteImminent) {\n            this.setState({\n                deleteImminent: true\n            }, () => {\n                this.t = setTimeout(() => {\n                    this.props.removePlaylist(this.props.playlist);\n                }, 3000);\n            });\n        } else if (this.state.deleteImminent) {\n            this.setState({\n                deleteImminent: false,\n                areYouSure: false\n            })\n        }\n    }\n    render() {\n        return (\n            <PlaylistListItem\n                playlist={this.props.playlist}\n                areYouSure={this.state.areYouSure}\n                deleteImminent={this.state.deleteImminent}\n                handleRemove={this.handleRemove}\n                editPlaylist={this.editPlaylist}\n                linkToPlaylist={this.linkToPlaylist}\n                isCurrentPlaylistOnList={this.props.isCurrentPlaylistOnList}\n                isSavedPlaylistAltered={this.props.isSavedPlaylistAltered}\n                isEdited={this.props.playlist.viewedInDetail}\n            />\n        );\n    };\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.areYouSure && !prevState.deleteImminent) {\n            clearTimeout(this.t);\n        } else if (prevState.deleteImminent) {\n            clearTimeout(this.t);\n        }\n    }\n};\n\nPlaylistListItem.propTypes = {\n    playlist: PropTypes.object.isRequired,\n    removePlaylist: PropTypes.func,\n    getPlaylistDetails: PropTypes.func,\n    isCurrentPlaylistOnList: PropTypes.bool.isRequired,\n    isSavedPlaylistAltered: PropTypes.bool.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PlaylistList.css';\nimport PlaylistListItemContainer from '../../containers/PlaylistListItemContainer';\n\nexport default function PlaylistList(props) {\n    const { playlists, removePlaylist, getPlaylistDetails, isSavedPlaylistAltered, isCurrentPlaylistOnList } = props;\n    return (\n        <div className='PlaylistList'>\n            {playlists.map(playlist => {\n                return (\n                    <PlaylistListItemContainer\n                        playlist={playlist}\n                        key={playlist.id}\n                        removePlaylist={removePlaylist}\n                        getPlaylistDetails={getPlaylistDetails}\n                        isSavedPlaylistAltered={isSavedPlaylistAltered}\n                        isCurrentPlaylistOnList={isCurrentPlaylistOnList}\n                    />\n                )\n            })}\n        </div>\n    );\n}\n\nPlaylistList.propTypes = {\n    playlists: PropTypes.array.isRequired,\n    removePlaylist: PropTypes.func.isRequired,\n    getPlaylistDetails: PropTypes.func.isRequired,\n    isSavedPlaylistAltered: PropTypes.bool.isRequired,\n    isCurrentPlaylistOnList: PropTypes.bool.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\nimport PlaylistList from '../PlaylistList/PlaylistList';\n\nexport default function SearchResults(props) {\n    const { tracks, addTrack, playTrack, pauseTrack, isTrackPlayed, playlists, removePlaylist, hasCheckedForPlaylists, getPlaylistDetails, isCurrentPlaylistOnList, isSavedPlaylistAltered } = props;\n    return (\n        <div \n            className=\"SearchResults\"\n            style={(tracks.length === 0 && playlists.length === 0 && !hasCheckedForPlaylists) ? {display: 'none'} : {}}\n        >\n            <h2>{(tracks.length === 0) ? 'No search results' : 'Search Results:'}</h2>\n            <div \n            className='SearchResults-tracklist'\n            style={(tracks.length === 0) ? {display: 'none'} : {}}\n            >\n                <TrackList \n                    tracks={tracks}\n                    isInPlaylist={false}\n                    addTrack={addTrack}\n                    playTrack={playTrack}\n                    pauseTrack={pauseTrack}\n                    isTrackPlayed={isTrackPlayed}\n                />\n            </div>\n            <h2 style={{paddingTop: '.88rem'}}>\n                {(playlists.length === 0) ? 'No playlists to display' : 'My Playlists:'}\n            </h2>\n            <div \n                className='SearchResults-playlists'\n                style={(tracks.length === 0) ? {height: '840px'} : {}}\n            >\n                <PlaylistList\n                    playlists={playlists}\n                    removePlaylist={removePlaylist}\n                    getPlaylistDetails={getPlaylistDetails}\n                    isSavedPlaylistAltered={isSavedPlaylistAltered}\n                    isCurrentPlaylistOnList={isCurrentPlaylistOnList}\n                />\n            </div>\n        </div>\n    );\n};\n\nSearchResults.propTypes = {\n    tracks: PropTypes.array.isRequired,\n    addTrack: PropTypes.func.isRequired,\n    playTrack: PropTypes.func.isRequired,\n    pauseTrack: PropTypes.func.isRequired,\n    isTrackPlayed: PropTypes.bool.isRequired,\n    playlists: PropTypes.array.isRequired,\n    removePlaylist: PropTypes.func.isRequired,\n    hasCheckedForPlaylists: PropTypes.bool.isRequired,\n    getPlaylistDetails: PropTypes.func.isRequired,\n    isSavedPlaylistAltered: PropTypes.bool.isRequired,\n    isCurrentPlaylistOnList: PropTypes.bool.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave, faTimes, faTrash, faQuestion, faExclamation } from '@fortawesome/free-solid-svg-icons';\n\nexport default function Playlist(props) {\n    const { tracks, playlistName, handleListNameChange, removeTrack, savePlaylist, playTrack, pauseTrack, isTrackPlayed, clearPlaylist, isCurrentPlaylistOnList, isSavedPlaylistAltered, handleDelete, areYouSure, deleteImminent } = props;\n    const saveIcon = <FontAwesomeIcon icon={faSave} />;\n    const timesIcon = <FontAwesomeIcon icon={faTimes} />;\n    const trashIcon = <FontAwesomeIcon icon={faTrash} />;\n    const questionIcon = <FontAwesomeIcon icon={faQuestion} />;\n    const exclamationIcon = <FontAwesomeIcon icon={faExclamation} />;\n    return (\n        <div \n            className=\"Playlist\"\n            style={(tracks.length === 0) ? {display: 'none'} : {}}\n        >\n            <div className='Playlist-title'>\n                <input \n                    value={playlistName} \n                    placeholder='New Playlist'\n                    onChange={handleListNameChange}\n                />\n                <button                    \n                    className={(tracks.length === 0 && !playlistName) ? 'Playlist-title-button-disabled' : 'Playlist-title-button'}\n                    onClick={clearPlaylist}\n                >\n                    {timesIcon}\n                </button>\n                <button\n                    className={!isCurrentPlaylistOnList ? 'Playlist-title-button-disabled' : 'Playlist-title-button'}\n                    onClick={!isCurrentPlaylistOnList ? null : handleDelete}\n                >\n                    {(areYouSure || deleteImminent) ? (deleteImminent ? exclamationIcon : questionIcon) : trashIcon}\n                </button>\n                <button \n                    className={(tracks.length === 0 || !playlistName || (isCurrentPlaylistOnList && !isSavedPlaylistAltered)) ? 'Playlist-title-button-disabled' : 'Playlist-title-button'}\n                    onClick={(tracks.length === 0 || !playlistName || (isCurrentPlaylistOnList && !isSavedPlaylistAltered)) ? null : savePlaylist}\n                >\n                    {saveIcon}\n                </button>\n            </div>\n            <div\n                className='Playlist-tracklist'\n            >\n                <TrackList\n                    tracks={tracks}\n                    isInPlaylist={true}\n                    removeTrack={removeTrack}\n                    playTrack={playTrack}\n                    pauseTrack={pauseTrack}\n                    isTrackPlayed={isTrackPlayed}\n                />\n            </div>     \n        </div>\n    );\n};\n\nPlaylist.propTypes = {\n    tracks: PropTypes.array.isRequired,\n    playlistName: PropTypes.string.isRequired,\n    handleListNameChange: PropTypes.func.isRequired,\n    removeTrack: PropTypes.func.isRequired,\n    savePlaylist: PropTypes.func.isRequired,\n    playTrack: PropTypes.func.isRequired,\n    pauseTrack: PropTypes.func.isRequired,\n    isTrackPlayed: PropTypes.bool.isRequired,\n    clearPlaylist: PropTypes.func.isRequired,\n    isCurrentPlaylistOnList: PropTypes.bool.isRequired,\n    isSavedPlaylistAltered: PropTypes.bool.isRequired,\n    handleDelete: PropTypes.func.isRequired,\n    areYouSure: PropTypes.bool.isRequired,\n    deleteImminent: PropTypes.bool.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Playlist from '../components/Playlist/Playlist';\n\nexport default class PlaylistContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      areYouSure: false,\n      deleteImminent: false\n    };\n    this.handleDelete = this.handleDelete.bind(this);\n  }\n  handleDelete() {\n    if (!this.state.areYouSure && !this.state.deleteImminent) {\n      this.setState({\n        areYouSure: true,\n      }, () => {\n        this.t = setTimeout(() => {\n          this.setState({\n            areYouSure: false\n          })\n        }, 5000);\n      });\n    } else if (this.state.areYouSure && !this.state.deleteImminent) {\n      this.setState({\n        deleteImminent: true\n      }, () => {\n        this.t = setTimeout(() => {\n          this.props.removePlaylist('current');\n        }, 3000);\n      });\n    } else if (this.state.deleteImminent) {\n      this.setState({\n        deleteImminent: false,\n        areYouSure: false\n      });\n    };\n  }\n  render() {\n    return (\n      <Playlist\n        tracks={this.props.tracks}\n        playlistName={this.props.playlistName}\n        handleListNameChange={this.props.handleListNameChange}\n        removeTrack={this.props.removeTrack}\n        savePlaylist={this.props.savePlaylist}\n        playTrack={this.props.playTrack}\n        pauseTrack={this.props.pauseTrack} \n        isTrackPlayed={this.props.isTrackPlayed}\n        clearPlaylist={this.props.clearPlaylist}\n        isCurrentPlaylistOnList={this.props.isCurrentPlaylistOnList}\n        isSavedPlaylistAltered={this.props.isSavedPlaylistAltered}\n        handleDelete={this.handleDelete}\n        areYouSure={this.state.areYouSure}\n        deleteImminent={this.state.deleteImminent}\n      />\n    );\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.areYouSure && !prevState.deleteImminent) {\n      clearTimeout(this.t);\n    } else if (prevState.deleteImminent) {\n      clearTimeout(this.t);\n    };\n  }\n};\n\nPlaylistContainer.propTypes = {\n  tracks: PropTypes.array.isRequired,\n  playlistName: PropTypes.string.isRequired,\n  handleListNameChange: PropTypes.func.isRequired,\n  removeTrack: PropTypes.func.isRequired,\n  savePlaylist: PropTypes.func.isRequired,\n  playTrack: PropTypes.func.isRequired,\n  pauseTrack: PropTypes.func.isRequired,\n  isTrackPlayed: PropTypes.bool.isRequired,\n  clearPlaylist: PropTypes.func.isRequired,\n  isCurrentPlaylistOnList: PropTypes.bool.isRequired,\n  isSavedPlaylistAltered: PropTypes.bool.isRequired,\n  removePlaylist: PropTypes.func\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './AppComp.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport PlaylistContainer from '../../containers/PlaylistContainer';\n\nexport default function AppComp(props) {\n    const { playlistTracks, searchTracks, searchPhrase, handleSearchChange, playlistName, handleListNameChange, addTrack, removeTrack, search, savePlaylist, playTrack, pauseTrack, isTrackPlayed, playlists, clearPlaylist, removePlaylist, isCurrentPlaylistOnList, hasCheckedForPlaylists, getPlaylistDetails, isSavedPlaylistAltered } = props;\n    return (\n        <div>\n            <h1>Play<span className=\"highlight\">List</span></h1>\n            <div className=\"App\">\n                <SearchBar \n                    searchPhrase={searchPhrase}\n                    handleSearchChange={handleSearchChange}\n                    handleClick={search}\n                    playlists={playlists}\n                    hasCheckedForPlaylists={hasCheckedForPlaylists}                    \n                />\n                <div className=\"App-playlist\">\n                    <SearchResults \n                        tracks={searchTracks}\n                        addTrack={addTrack}\n                        playTrack={playTrack}\n                        pauseTrack={pauseTrack}\n                        isTrackPlayed={isTrackPlayed}\n                        playlists={playlists}\n                        removePlaylist={removePlaylist}\n                        hasCheckedForPlaylists={hasCheckedForPlaylists}\n                        getPlaylistDetails={getPlaylistDetails}\n                        isCurrentPlaylistOnList={isCurrentPlaylistOnList}\n                        isSavedPlaylistAltered={isSavedPlaylistAltered}\n                    />\n                    <PlaylistContainer\n                        tracks={playlistTracks}\n                        playlistName={playlistName}\n                        handleListNameChange={handleListNameChange}\n                        removeTrack={removeTrack}\n                        savePlaylist={savePlaylist}\n                        playTrack={playTrack}\n                        pauseTrack={pauseTrack} \n                        isTrackPlayed={isTrackPlayed}\n                        clearPlaylist={clearPlaylist}\n                        isCurrentPlaylistOnList={isCurrentPlaylistOnList}\n                        isSavedPlaylistAltered={isSavedPlaylistAltered}\n                        removePlaylist={removePlaylist}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nAppComp.propTypes = {\n    playlistTracks: PropTypes.array.isRequired,\n    searchTracks: PropTypes.array.isRequired,\n    searchPhrase: PropTypes.string.isRequired,\n    handleSearchChange: PropTypes.func.isRequired,\n    playlistName: PropTypes.string.isRequired,\n    handleListNameChange: PropTypes.func.isRequired,\n    addTrack: PropTypes.func,\n    removeTrack: PropTypes.func,\n    search: PropTypes.func.isRequired,\n    savePlaylist: PropTypes.func.isRequired,\n    playTrack: PropTypes.func.isRequired,\n    pauseTrack: PropTypes.func.isRequired,\n    isTrackPlayed: PropTypes.bool.isRequired,\n    playlists: PropTypes.array.isRequired,\n    clearPlaylist: PropTypes.func.isRequired,\n    removePlaylist: PropTypes.func.isRequired,\n    isCurrentPlaylistOnList: PropTypes.bool.isRequired,\n    hasCheckedForPlaylists: PropTypes.bool.isRequired,\n    getPlaylistDetails: PropTypes.func.isRequired,\n    isSavedPlaylistAltered: PropTypes.bool.isRequired\n}\n","const Spotify = {\n    clientId: process.env.REACT_APP_USER_ID,\n    accessToken: '',\n    tokenExpiry: null,\n    redirectURI: process.env.REACT_APP_REDIRECT_URI,\n    //redirectURI: 'http://localhost:3000',\n    generateURLState() {\n        sessionStorage.urlState = Math.floor(Math.random() * 100000).toString();\n    },\n    getAccessToken() {\n        if (window.location.href.match(/state=(\\d+)/)[1] === sessionStorage.urlState) {\n            this.accessToken = window.location.href.match(/access_token=([^&]+)/)[1];\n            this.tokenExpiry = window.location.href.match(/expires_in=([^&]+)/)[1];\n            const tokenExpiryDate = Date.now() + (this.tokenExpiry * 1000);\n            window.history.pushState('AccessToken', null, '/');\n            setTimeout(() => (this.accessToken = ''), tokenExpiryDate - Date.now());\n        }\n    },\n    getUserId(){\n        const url = `https://api.spotify.com/v1/me`;\n        return fetch(url, {\n            headers: {\n                \"Authorization\": `Bearer ${this.accessToken}`\n            }\n        }).then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n        }).then(jsonResponse => jsonResponse.id);  \n    },\n    getUserPlaylists() {\n        const url = `https://api.spotify.com/v1/me/playlists`\n        return fetch(url, {\n            headers: {\n                \"Authorization\": `Bearer ${this.accessToken}`\n            }\n        }).then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n        });\n    },\n    getPlaylistDetails(playlistId) {\n        const url = `https://api.spotify.com/v1/playlists/${playlistId}`;\n        return fetch(url, {\n            headers: {\n                \"Authorization\": `Bearer ${this.accessToken}`\n            }\n        }).then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n        });\n    },\n    createPlaylist(userId, playlistName){\n        const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n        const jsonBody = JSON.stringify({\n            name: playlistName\n        });\n        return fetch(url, {\n            method: 'POST',\n            headers: {\n                \"Authorization\": `Bearer ${this.accessToken}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: jsonBody\n        }).then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n        });\n    },\n    addPlaylist(playlistName, uriArr) {\n        if (!this.accessToken) {\n            this.generateURLState();\n            this.spotifyLogin(sessionStorage.urlState);\n        } else {\n            return this.getUserId().then(response => {\n                return this.createPlaylist(response, playlistName)\n            }).then(response => {\n                const playlistId = response.id;\n                const url = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;\n                const jsonBody = JSON.stringify({\n                    uris: uriArr\n                });\n                return fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        \"Authorization\": `Bearer ${this.accessToken}`,\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: jsonBody\n                });\n            }).then(response => {\n                if (response.ok){\n                    return response.json();\n                }\n            });\n        };        \n    },\n    removePlaylist(playlistId) {\n        const url = `https://api.spotify.com/v1/playlists/${playlistId}/followers`;\n        return fetch(url, {\n            method: 'DELETE',\n            headers: {\n                \"Authorization\": `Bearer ${this.accessToken}`\n            }\n        }).then(response => {\n            if (response.ok) {\n                return response;\n            }\n        });\n    },\n    updatePlaylist(playlistName, uriArr, playlistId) {\n        if (!this.accessToken) {\n            this.generateURLState();\n            this.spotifyLogin(sessionStorage.urlState);\n        } else {\n            const url1 = `https://api.spotify.com/v1/playlists/${playlistId}`;\n            const url2 = `${url1}/tracks`;\n            return fetch(url1, {\n                method: 'PUT',\n                headers: {\n                    \"Authorization\": `Bearer ${this.accessToken}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    name: playlistName\n                })\n            }).then(response => {\n                if (response.ok) {\n                    return fetch(url2, {\n                        method: 'PUT',\n                        headers: {\n                            \"Authorization\": `Bearer ${this.accessToken}`,\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            uris: uriArr\n                        })\n                    });\n                };\n            }).then(response => {\n                if (response.ok) {\n                    return response;\n                }\n            });\n        };\n    },\n    spotifyLogin(urlState) {\n        const url = `https://accounts.spotify.com/authorize?client_id=${this.clientId}&response_type=token&redirect_uri=${encodeURIComponent(this.redirectURI)}&state=${urlState}&scope=playlist-modify-public`;\n        if (!this.accessToken) {\n            window.location.href = url;\n            return true;\n        } else {\n            return false;\n        }  \n    },\n    search(phrase) {\n        if (phrase) {\n            const url = `https://api.spotify.com/v1/search?q=${encodeURIComponent(phrase)}&type=track`;\n            return fetch(url, {\n                headers: {\n                \"Authorization\": `Bearer ${this.accessToken}`\n                }\n            }).then(response => {\n                if (response.ok) {\n                    return response.json();\n                }   \n            }).then(jsonResponse => {\n                const items = jsonResponse.tracks.items;\n                return items;\n            });\n        };        \n    }\n}\n\nexport default Spotify;\n","import React from 'react';\nimport AppComp from '../components/AppComp/AppComp';\nimport Spotify from '../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {      \n      playlistTracks: [],\n      searchPhrase: '',\n      searchTracks: [],\n      playlistName: '',\n      isTrackPlayed: false,\n      playlists: [],\n      isCurrentPlaylistOnList: false,\n      hasCheckedForPlaylists: false,\n      isSavedPlaylistAltered: false\n    };\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleListNameChange = this.handleListNameChange.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.search = this.search.bind(this);\n    this.handleSearchResponse = this.handleSearchResponse.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.playTrack = this.playTrack.bind(this);\n    this.pauseTrack = this.pauseTrack.bind(this);\n    this.clearPlaylist = this.clearPlaylist.bind(this);\n    this.getPlaylists = this.getPlaylists.bind(this);\n    this.removePlaylist = this.removePlaylist.bind(this);\n    this.getPlaylistDetails = this.getPlaylistDetails.bind(this);\n    this.handlePlaylistDetails = this.handlePlaylistDetails.bind(this);\n  }\n  handleSearchChange({target}) {\n    this.setState({\n      searchPhrase: target.value\n    })\n  }\n  search() {\n    Spotify.generateURLState();\n    sessionStorage.searchPhrase = this.state.searchPhrase;\n    sessionStorage.playlistName = this.state.playlistName;\n    sessionStorage.playlistTracks = JSON.stringify(this.state.playlistTracks);\n    const needsLogging = Spotify.spotifyLogin(sessionStorage.urlState);\n    if (!needsLogging && this.state.searchPhrase) {\n      Spotify.search(this.state.searchPhrase).then(response => this.handleSearchResponse(response));\n      this.getPlaylists();\n    } else if (!needsLogging && !this.state.searchPhrase) {\n      this.getPlaylists();\n    }\n  }\n  handleSearchResponse(response) {\n    const searchTracks = response.map(track => ({\n      title: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      id: track.id,\n      URI: track.uri,\n      preview: track.preview_url,\n      doubledInPlaylist: false,\n      url: track.external_urls.spotify,\n      artistUrl: track.artists[0].external_urls.spotify,\n      albumUrl: track.album.external_urls.spotify\n    }));\n    const searchTracksFiltered = searchTracks.filter(track => (!this.state.playlistTracks.map(plTrack => plTrack.id).includes(track.id)));\n    this.setState({\n      searchTracks: searchTracksFiltered,\n      searchPhrase: '',\n      isTrackPlayed: false\n    });\n  }\n  handleListNameChange({target}) {\n    this.setState({\n      playlistName: target.value\n    })\n  }\n  handlePlaylistDetails(response) {\n    const playlistName = response.name;\n    const playlistTracks = response.tracks.items.map(item => ({\n      title: item.track.name,\n      artist: item.track.artists[0].name,\n      album: item.track.album.name,\n      id: item.track.id,\n      URI: item.track.uri,\n      doubledInPlaylist: true,\n      preview: item.track.preview_url,\n      url: item.track.external_urls.spotify,\n      artistUrl: item.track.artists[0].external_urls.spotify,\n      albumUrl: item.track.album.external_urls.spotify\n    }));\n    const trackArr = this.state.searchTracks;\n    if (trackArr.length > 0) {\n      const idArr = trackArr.map(track => track.id);\n      trackArr.forEach(track => {\n        track.doubledInPlaylist = false;\n      });\n      playlistTracks.forEach(playlistTrack => {\n        console.log(playlistTrack);\n        const index = idArr.indexOf(playlistTrack.id);\n        if (index > -1) {\n          trackArr[index].doubledInPlaylist = true;\n        };        \n      });\n    };    \n    this.setState({\n      playlistName: playlistName,\n      playlistTracks: playlistTracks,\n      searchTracks: trackArr,\n      isCurrentPlaylistOnList: true\n    });\n  }\n  getPlaylists() {\n    if (!this.state.isCurrentPlaylistOnList) {\n      Spotify.getUserPlaylists().then(response => {\n        const playlists = response.items.map(item => {\n          return {\n            id: item.id,\n            name: item.name,\n            tracks: item.tracks.total,\n            images: item.images,\n            viewedInDetail: false,\n            url: item.external_urls.spotify\n          }\n        });\n        this.setState({\n          playlists: playlists,\n          hasCheckedForPlaylists: true\n        })\n      });\n    };    \n  }\n  savePlaylist() {\n    const uriArr = this.state.playlistTracks.map(track => track.URI);    \n    if (uriArr.length > 0 ) {\n      sessionStorage.uriArr = JSON.stringify(uriArr);\n      sessionStorage.playlistName = this.state.playlistName;\n      sessionStorage.playlistTracks = JSON.stringify(this.state.playlistTracks);\n      if (this.state.isCurrentPlaylistOnList) {\n        const playlistArr = this.state.playlists;\n        const editedPlaylistId = playlistArr.filter(playlist => playlist.viewedInDetail)[0].id;\n        sessionStorage.editedPlaylistId = editedPlaylistId\n        Spotify.updatePlaylist(sessionStorage.playlistName, JSON.parse(sessionStorage.uriArr), sessionStorage.editedPlaylistId).then(() => {\n          sessionStorage.editedPlaylistId = '';\n          this.getPlaylists();\n          this.clearPlaylist();\n        });\n      } else {\n        Spotify.addPlaylist(sessionStorage.playlistName, JSON.parse(sessionStorage.uriArr)).then(() => {\n          this.getPlaylists();\n          this.clearPlaylist();\n        });\n      };\n    };\n  }\n  clearPlaylist() {\n    this.setState({\n      playlistTracks: [],\n      playlistName: '',\n      searchPhrase: sessionStorage.searchPhrase,\n      isCurrentPlaylistOnList: false,\n      isSavedPlaylistAltered: false\n    }, () => {\n      this.search();\n    });\n  }\n  removePlaylist(playlistToRemove) {\n    if (playlistToRemove === 'current') {\n      Spotify.generateURLState();\n      const playlistArr = this.state.playlists;\n      const playlistToDeleteId = playlistArr.filter(playlist => playlist.viewedInDetail)[0].id;\n      sessionStorage.playlistToDeleteId = playlistToDeleteId;\n      sessionStorage.searchTracks = JSON.stringify(this.state.searchTracks);\n      sessionStorage.playlistName = this.state.playlistName;\n      sessionStorage.playlistTracks = JSON.stringify(this.state.playlistTracks);\n      const needsLogging = Spotify.spotifyLogin(sessionStorage.urlState);\n      if (!needsLogging) {\n        Spotify.removePlaylist(sessionStorage.playlistToDeleteId).then(() => {\n          this.clearPlaylist();\n        });\n        sessionStorage.playlistToDeleteId = '';\n        sessionStorage.searchTracks = [];\n      };\n    } else {\n      Spotify.generateURLState();\n      sessionStorage.playlistToRemoveId = playlistToRemove.id;\n      sessionStorage.searchTracks = JSON.stringify(this.state.searchTracks);\n      sessionStorage.playlistName = this.state.playlistName;\n      sessionStorage.playlistTracks = JSON.stringify(this.state.playlistTracks);\n      const needsLogging = Spotify.spotifyLogin(sessionStorage.urlState);\n      if (!needsLogging) {\n        Spotify.removePlaylist(sessionStorage.playlistToRemoveId).then(() => {\n          this.getPlaylists();\n        });\n        sessionStorage.playlistToRemoveId = '';\n        sessionStorage.searchTracks = [];\n      };\n    };      \n  }\n  getPlaylistDetails(playlistToEdit) {\n    const playlistsArr = this.state.playlists;\n    const idArr = playlistsArr.map(item => item.id);\n    const index = this.state.playlists.indexOf(playlistToEdit);    \n    const oldEditedPlaylistArr = playlistsArr.filter(playlist => playlist.viewedInDetail);\n    if (oldEditedPlaylistArr.length > 0) {\n      const id = oldEditedPlaylistArr[0].id;\n      const oldIndex = idArr.indexOf(id);\n      playlistsArr[oldIndex].viewedInDetail = false;\n    }\n    playlistsArr[index].viewedInDetail = true;\n    this.setState({\n      playlists: playlistsArr\n    }, () => {\n      Spotify.generateURLState();\n      sessionStorage.playlistToEditId = playlistToEdit.id;\n      sessionStorage.searchTracks = JSON.stringify(this.state.searchTracks);\n      const needsLogging = Spotify.spotifyLogin(sessionStorage.urlState);\n      if (!needsLogging) {\n        Spotify.getPlaylistDetails(sessionStorage.playlistToEditId).then(response => this.handlePlaylistDetails(response));\n        sessionStorage.playlistToEditId = '';\n        sessionStorage.searchTracks = [];\n      };    \n    });    \n  }\n  addTrack(trackToAdd) {\n    if (!this.state.playlistTracks.map(track => track.id).includes(trackToAdd.id)) {\n      const trackArr = this.state.searchTracks;\n      const idArr = trackArr.map(track => track.id);\n      const index = idArr.indexOf(trackToAdd.id);\n      trackArr[index].doubledInPlaylist = true;\n      trackToAdd.doubledInPlaylist = true;\n      this.setState(prev => ({\n        searchTracks: trackArr,\n        playlistTracks: [...prev.playlistTracks, trackToAdd]\n      }));\n      if (this.state.isCurrentPlaylistOnList) {\n        this.setState({\n          isSavedPlaylistAltered: true\n        })\n      };\n    };    \n  }\n  playTrack(track) {\n    if (!this.state.isTrackPlayed) {\n      this.setState({\n        isTrackPlayed: true\n      }, () => {\n        document.getElementById(track.id).play();\n      })\n    }\n  }\n  pauseTrack(track) {\n    if (this.state.isTrackPlayed) {\n      this.setState({\n        isTrackPlayed: false\n      }, () => {\n        document.getElementById(track.id).pause();\n      })\n    } else if (track !== null) {\n      document.getElementById(track.id).pause();\n    };\n  }\n  removeTrack(trackToRemove) {\n    const searchArr = this.state.searchTracks;\n    const idArr = searchArr.map(track => track.id);\n    const updatedPlaylistTracks = this.state.playlistTracks.filter(track => track.id !== trackToRemove.id);\n    if (idArr.includes(trackToRemove.id)) {\n      const index = idArr.indexOf(trackToRemove.id);\n      searchArr[index].doubledInPlaylist = false;\n      this.setState({\n        searchTracks: searchArr,\n        playlistTracks: updatedPlaylistTracks\n      })\n    } else {\n      this.setState({\n        playlistTracks: updatedPlaylistTracks\n      });\n    };\n    if (this.state.isCurrentPlaylistOnList) {\n      this.setState({\n        isSavedPlaylistAltered: true\n      })\n    };        \n  }\n  render() {\n    return (\n      <AppComp\n        playlistTracks={this.state.playlistTracks}\n        searchTracks={this.state.searchTracks} \n        searchPhrase={this.state.searchPhrase}\n        handleSearchChange={this.handleSearchChange}\n        playlistName={this.state.playlistName}\n        handleListNameChange={this.handleListNameChange}\n        addTrack={this.addTrack}\n        removeTrack={this.removeTrack}\n        search={this.search}\n        savePlaylist={this.savePlaylist}\n        playTrack={this.playTrack}\n        pauseTrack={this.pauseTrack}\n        isTrackPlayed={this.state.isTrackPlayed}\n        playlists={this.state.playlists}\n        clearPlaylist={this.clearPlaylist}\n        removePlaylist={this.removePlaylist}\n        isCurrentPlaylistOnList={this.state.isCurrentPlaylistOnList}\n        hasCheckedForPlaylists={this.state.hasCheckedForPlaylists}\n        getPlaylistDetails={this.getPlaylistDetails}\n        isSavedPlaylistAltered={this.state.isSavedPlaylistAltered}\n      />\n    );\n  }\n  componentDidMount() {\n    if (window.location.href.match(/access_token=/))  {\n      Spotify.getAccessToken();\n      this.setState({\n        searchPhrase: sessionStorage.searchPhrase,\n        searchTracks: ((!sessionStorage.searchPhrase && sessionStorage.searchTracks) ? JSON.parse(sessionStorage.searchTracks) : []),\n        playlistName: sessionStorage.playlistName,\n        playlistTracks: JSON.parse(sessionStorage.playlistTracks)\n      }, () => {\n        this.getPlaylists();\n        if (this.state.searchPhrase) {\n          Spotify.search(this.state.searchPhrase).then(response => this.handleSearchResponse(response));\n        };\n        if (sessionStorage.playlistToRemoveId) {\n          Spotify.removePlaylist(sessionStorage.playlistToRemoveId).then(() => {\n            this.getPlaylists();\n          });\n          sessionStorage.playlistToRemoveId = '';\n          sessionStorage.searchTracks = [];\n        };\n        if (sessionStorage.playlistToDeleteId) {\n          Spotify.removePlaylist(sessionStorage.playlistToDeleteId).then(() => {\n            this.clearPlaylist();\n          });\n          sessionStorage.playlistToDeleteId = '';\n          sessionStorage.searchTracks = [];\n        }\n        if (sessionStorage.playlistToEditId) {\n          Spotify.getPlaylistDetails(sessionStorage.playlistToEditId).then(response => this.handlePlaylistDetails(response));\n          sessionStorage.playlistToEditId = '';\n          sessionStorage.searchTracks = [];\n        };\n        if (sessionStorage.editedPlaylistId) {\n          Spotify.updatePlaylist(sessionStorage.playlistName, JSON.parse(sessionStorage.uriArr), sessionStorage.editedPlaylistId).then(() => {\n            sessionStorage.editedPlaylistId = '';\n            this.getPlaylists();\n            this.clearPlaylist();\n          });\n        }\n      });\n    }\n  }\n};\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}